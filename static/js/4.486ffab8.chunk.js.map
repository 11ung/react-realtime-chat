{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/common/Input/index.jsx","components/pages/Message/components/MessageBox/index.jsx","assets/images/default-avatar.png","components/pages/Message/components/MessageItem/index.jsx","components/pages/Message/components/MessageNav/index.jsx","components/pages/Message/components/MessageUserItem/index.jsx","components/pages/Message/AllMessage/index.jsx","pages/Home/index.jsx"],"names":["_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Input","className","id","label","type","value","icon","defaultValue","name","error","errorMessage","disabled","placeholder","onChange","loading","viewOnly","maxLength","autoComplete","refs","rest","htmlFor","ref","MessageBox","useState","val","setVal","messRef","useRef","useContext","MessengerContext","conversation","inboxeDetail","setInboxDetail","userInfo","AuthContext","socket","HomeContext","useEffect","on","response","currentId","_id","data","creator","recipient","conversationId","old","off","useLayoutEffect","current","scrollHeight","offsetHeight","scrollTop","sendnewMessage","payload","text","emit","fullName","length","map","index","mess","isAvatar","e","target","onKeyPress","which","onClick","MessageItem","date","src","avatar","alt","MessageNav","allMessages","setConversation","handleSelectUser","user","item","message","latestMessage","handleSelect","MessageUserItem","AllMessage","doGetListInbox","doGetInboxDetail","console","log","Home","history","useHistory","style","height","justifyContent","padding","alignItems","logout","removeCookie","ACCESS_TOKEN","push"],"mappings":"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","file":"static/js/4.486ffab8.chunk.js","sourcesContent":["import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\r\nimport './index.scss';\r\n\r\nexport const Input = ({\r\n    className = '',\r\n    id,\r\n    label,\r\n    type = 'text',\r\n    icon,\r\n    value,\r\n    defaultValue,\r\n    name,\r\n    error,\r\n    errorMessage,\r\n    disabled = false,\r\n    placeholder = 'Please enter the value...',\r\n    onChange = () => {},\r\n    loading = false,\r\n    viewOnly = false,\r\n    maxLength = 200,\r\n    autoComplete = 'off',\r\n    refs,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <div id={id} className={`tr__field ${className} ${disabled ? 'disabled' : ''}`}>\r\n            {label && (\r\n                <label htmlFor={name}>{label}</label>\r\n            )}\r\n            <div className=\"tr__field--wrapper\">\r\n                {viewOnly ? (\r\n                    <p className=\"label\">{defaultValue || value}</p>\r\n                ) : (\r\n                    <input\r\n                        key={defaultValue}\r\n                        type={type}\r\n                        name={name}\r\n                        id={name}\r\n                        className={`tr__field-input ${error ? 'error' : ''}`}\r\n                        placeholder={disabled ? '' : placeholder}\r\n                        autoComplete={autoComplete}\r\n                        ref={refs}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        defaultValue={defaultValue}\r\n                        maxLength={maxLength}\r\n                        {...rest}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <p\r\n                className={`error ${error && errorMessage && 'active'}`}\r\n            >{errorMessage}</p>\r\n        </div>\r\n    )\r\n};\r\n","import { AuthContext, HomeContext, MessengerContext } from 'contexts';\r\nimport React, { useContext, useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport { MessageItem } from 'components';\r\nimport './index.scss';\r\nimport { Input } from 'components/common';\r\n\r\nexport const MessageBox = () => {\r\n    const [val, setVal] = useState('');\r\n    const messRef = useRef();\r\n    const { conversation, inboxeDetail, setInboxDetail } = useContext(MessengerContext);\r\n    const { userInfo } = useContext(AuthContext);\r\n    const { socket } = useContext(HomeContext);\r\n\r\n\r\n    /*eslint-disable */\r\n    useEffect(() => {\r\n        socket.on('sendMessage', (response) => {\r\n            const currentId = userInfo._id;\r\n            const { creator, recipient } = response.data;\r\n            const conversationId = conversation && conversation._id; \r\n            if (\r\n                (currentId === creator && conversationId === recipient) ||\r\n                (currentId === recipient && conversationId === creator)\r\n            ) {\r\n                setInboxDetail(old => [...old, response.data]);\r\n            }\r\n        });\r\n        return () => {\r\n            socket.off('sendMessage');\r\n        }\r\n    }, [conversation]);\r\n    /*eslint-enable */\r\n\r\n    useLayoutEffect(() => {\r\n        if (messRef.current.scrollHeight > messRef.current.offsetHeight)\r\n            messRef.current.scrollTop = messRef.current.scrollHeight;\r\n    }, [inboxeDetail])\r\n\r\n    const sendnewMessage = () => {\r\n        if (val) {\r\n            const payload = {\r\n                recipient: conversation._id,\r\n                text: val,\r\n            }\r\n            socket.emit('sendMessage', payload);\r\n            setVal('');\r\n        }\r\n    }\r\n\r\n    const hanldeChangeInput = e => {\r\n        const mess = e.target.value;\r\n        setVal(mess);\r\n    }\r\n\r\n    return (\r\n        <div className={`tr_messbox`}>\r\n\r\n            <div className=\"header\">{conversation && conversation.fullName}</div>\r\n            <div className=\"content\" ref={messRef}>\r\n                {\r\n                    inboxeDetail.length > 0 && inboxeDetail.map((data, index) =>\r\n                        <MessageItem\r\n                            mess={data.text}\r\n                            isAvatar={userInfo._id === data.recipient}\r\n                            key={index}\r\n                        // date={moment(data.created_date).format(DISPLAY_DATE)}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"footer flex\">\r\n                <Input\r\n                    className=\"input-search\"\r\n                    placeholder=\"Aa\"\r\n                    onChange={hanldeChangeInput}\r\n                    value={val}\r\n                    onKeyPress={e => {\r\n                        if (e.which === 13) sendnewMessage();\r\n                    }}\r\n                />\r\n                <button onClick={sendnewMessage}>send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.522560c8.png\";","import React from 'react';\r\nimport './index.scss';\r\nimport avatar from 'assets/images/default-avatar.png';\r\n\r\nexport const MessageItem = ({\r\n    mess = '',\r\n    isAvatar = false,\r\n    date,\r\n    className = ''\r\n}) => {\r\n    return (\r\n        <div className={`item flex ${className} ${isAvatar ? 'left' : 'right'} mtx1 `}>\r\n            {isAvatar &&  <img src={avatar} alt=\"avatar\" className=\"avatar-mess mrx1\"></img>}\r\n            <div className={`tr_mess `}>{mess}</div>\r\n            <div className=\"time\">{date}</div>\r\n        </div>\r\n    )\r\n}\r\n","import { MessengerContext } from 'contexts';\r\nimport React, { useContext } from 'react';\r\nimport { MessageUserItem } from 'components';\r\nimport './index.scss';\r\nimport { Input } from 'components';\r\n\r\nexport const MessageNav = ({ allMessages = [] }) => {\r\n    const { conversation, setConversation } = useContext(MessengerContext);\r\n\r\n    const handleSelectUser = (user) => {\r\n        setConversation(user);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tr_mess-nav\">\r\n            <div className=\"tr_mess-nav__header mbx2\">\r\n                <h1>Chat</h1>\r\n                <div className=\"tr__field mtx1\">\r\n                    <div className=\"tr__field--wrapper\">\r\n                        <Input className=\"input-search\" placeholder=\"Search in Messenger\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"tr_mess-nav__content\">\r\n                {allMessages.length > 0 && allMessages.map(item => {\r\n                    return (\r\n                        <MessageUserItem\r\n                            className={`${item && item.conversation && conversation && conversation._id === item.conversation._id ? \"selected\" : ''}`}\r\n                            userInfo={item && item.conversation}\r\n                            message={item && item.latestMessage}\r\n                            handleSelect={handleSelectUser}\r\n                            key={item && item.conversation._id}\r\n                        />\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './index.scss';\r\nimport avatar from 'assets/images/default-avatar.png';\r\n\r\nexport const MessageUserItem = ({\r\n    className = \"\",\r\n    userInfo = {},\r\n    message = \"\",\r\n    handleSelect = () => {}\r\n}) => {\r\n    return (\r\n        <div className={`tr_user-item flex ${className}`} onClick={() => handleSelect(userInfo)}>\r\n            <img src={avatar} alt=\"avatar\" className=\"avatar mrx1\"></img>\r\n            <div className=\"tr_user-item__info\">\r\n                <div className=\"tr_user-item__info-name\">{userInfo && userInfo.fullName}</div>\r\n                <div className=\"tr_user-item__info-mess\">{message}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { AuthContext, HomeContext, MessengerContext } from 'contexts';\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { MessageBox, MessageNav } from 'components/';\r\nimport './index.scss';\r\n\r\nexport const AllMessage = () => {\r\n    const {\r\n        allMessages,\r\n        doGetListInbox,\r\n        conversation,\r\n        doGetInboxDetail,\r\n        setConversation\r\n    } = useContext(MessengerContext);\r\n    const { socket } = useContext(HomeContext);\r\n    const { userInfo } = useContext(AuthContext);\r\n\r\n    /*eslint-disable */\r\n    useEffect(() => {\r\n        socket.on('newMessage', (response) => {\r\n            const currentId = userInfo._id;\r\n            const { recipient, creator } = response.data;\r\n            console.log(response)\r\n            if (currentId === recipient || currentId === creator) {\r\n                doGetListInbox();\r\n            }\r\n        });\r\n        doGetListInbox(data => {\r\n            setConversation(data[0].conversation);\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (conversation)\r\n            doGetInboxDetail(conversation._id);\r\n    }, [conversation])\r\n    /*eslint-enable */\r\n\r\n    return (\r\n        <div className=\"tr_mess-content flex \">\r\n            <MessageNav allMessages={allMessages} />\r\n            <MessageBox />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useContext } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { AllMessage } from 'components';\r\nimport { MessengerProvider } from 'contexts/MessengerContext';\r\nimport { ACCESS_TOKEN, removeCookie } from 'utils';\r\nimport { AuthContext } from 'contexts';\r\nimport { logout } from 'actions';\r\n\r\nconst Home = () => {\r\n    const history = useHistory();\r\n    const {userInfo} = useContext(AuthContext);\r\n    \r\n    const handleLogout = () => {\r\n        logout();\r\n        removeCookie(ACCESS_TOKEN)\r\n        history.push(\"/authentication\");\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div className=\"flex\" style={{height: '38px', justifyContent: 'space-between', padding: '10px', alignItems: 'center'}}>\r\n                Wellcome {userInfo && userInfo.fullName}!\r\n                <button style={{height: '24px' }} onClick={handleLogout}>\r\n                    Logout\r\n                </button>\r\n            </div>\r\n            <MessengerProvider>\r\n                <AllMessage />\r\n            </MessengerProvider>\r\n        </div>\r\n    )\r\n}\r\nexport default Home;"],"sourceRoot":""}