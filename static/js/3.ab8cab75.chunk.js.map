{"version":3,"sources":["contexts/index.jsx","contexts/MessengerContext.jsx","actions/message.jsx","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","components/common/Input/index.jsx","components/pages/Message/components/MessageBox/index.jsx","assets/images/default-avatar.png","components/pages/Message/components/MessageItem/index.jsx","components/pages/Message/components/MessageNav/index.jsx","components/pages/Message/components/MessageUserItem/index.jsx","components/pages/Message/AllMessage/index.jsx","pages/Authencation/LoginForm/index.jsx"],"names":["MessengerContext","createContext","MessengerProvider","children","useState","allMessages","setAllMessages","conversation","setConversation","inboxeDetail","setInboxDetail","doSendMessage","payload","callback","a","sendMessage","response","data","status","doGetInboxDetail","id","getInboxDetail","doGetListInbox","getListInbox","Provider","value","axios","post","API_MESSAGE","authHeaders","recipientId","get","GET_INBOX","replace","GET_LIST_INBOX","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","from","unsupportedIterableToArray","TypeError","Input","className","label","type","icon","defaultValue","name","error","errorMessage","disabled","placeholder","onChange","loading","viewOnly","maxLength","autoComplete","refs","rest","htmlFor","ref","MessageBox","val","setVal","messRef","useRef","useContext","userInfo","AuthContext","socket","HomeContext","useEffect","on","currentId","_id","creator","recipient","conversationId","old","off","useLayoutEffect","current","scrollHeight","offsetHeight","scrollTop","sendnewMessage","text","emit","fullName","length","map","index","mess","isAvatar","e","target","onKeyPress","which","onClick","MessageItem","date","src","avatar","alt","MessageNav","handleSelectUser","user","item","message","latestMessage","handleSelect","MessageUserItem","AllMessage","console","log","LoginFrom","email","setEmail","setFullName","password","setPassword","history","useHistory","doLogin","doRegister","push"],"mappings":"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","file":"static/js/3.ab8cab75.chunk.js","sourcesContent":["export { MessengerContext } from 'contexts/MessengerContext';\r\nexport { HomeContext } from 'contexts/HomeContext';\r\nexport { AuthContext } from 'contexts/AuthContext';","import { getInboxDetail, getListInbox, sendMessage } from \"actions\";\r\nimport { createContext, useState } from \"react\";\r\n\r\nexport const MessengerContext = createContext();\r\n\r\nexport const MessengerProvider = ({ children }) => {\r\n    const [allMessages, setAllMessages] = useState([]);\r\n    const [conversation, setConversation] = useState(null);\r\n    const [inboxeDetail, setInboxDetail] = useState([]);\r\n\r\n    const doSendMessage = async (payload, callback) => {\r\n        try {\r\n            if (payload) {\r\n                const response = await sendMessage(payload);\r\n                const { data, status } = response;\r\n                if (data && status === 200) {\r\n                    if (callback)\r\n                        callback();\r\n                }\r\n            }\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n\r\n    const doGetInboxDetail = async (id, callback) => {\r\n        setInboxDetail([]);\r\n        const response = await getInboxDetail(id);\r\n        const { data, status } = response;\r\n        if (data && status === 200) {\r\n            setInboxDetail(data)\r\n            if (callback)\r\n                callback();\r\n        }\r\n    }\r\n\r\n    const doGetListInbox = async (callback) => {\r\n        const response = await getListInbox();\r\n        const { data, status } = response;\r\n        if (data && status === 200) {\r\n            setAllMessages(data);\r\n            if (callback)\r\n                callback(data);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <MessengerContext.Provider\r\n            value={{\r\n                allMessages,\r\n                inboxeDetail,\r\n                conversation,\r\n                setConversation,\r\n                doSendMessage,\r\n                doGetInboxDetail,\r\n                doGetListInbox,\r\n                setInboxDetail\r\n            }}\r\n        >\r\n            {children}\r\n        </MessengerContext.Provider>\r\n    )\r\n}","import axios from \"axios\"\r\nimport { API_MESSAGE, GET_INBOX, GET_LIST_INBOX } from \"utils\";\r\nimport { authHeaders } from \"./auth\";\r\n\r\nexport const sendMessage = (data) => {\r\n    return axios.post(API_MESSAGE, data, authHeaders());\r\n}\r\n\r\nexport const getInboxDetail = (recipientId) => {\r\n    return axios.get(GET_INBOX.replace(\":recipientId\", recipientId), authHeaders());\r\n}\r\n\r\nexport const getListInbox = () => {\r\n    return axios.get(GET_LIST_INBOX, authHeaders());\r\n}\r\n","import arrayWithoutHoles from \"@babel/runtime/helpers/esm/arrayWithoutHoles\";\nimport iterableToArray from \"@babel/runtime/helpers/esm/iterableToArray\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableSpread from \"@babel/runtime/helpers/esm/nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"@babel/runtime/helpers/esm/arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react';\r\nimport './index.scss';\r\n\r\nexport const Input = ({\r\n    className = '',\r\n    id,\r\n    label,\r\n    type = 'text',\r\n    icon,\r\n    value,\r\n    defaultValue,\r\n    name,\r\n    error,\r\n    errorMessage,\r\n    disabled = false,\r\n    placeholder = 'Please enter the value...',\r\n    onChange = () => {},\r\n    loading = false,\r\n    viewOnly = false,\r\n    maxLength = 200,\r\n    autoComplete = 'off',\r\n    refs,\r\n    ...rest\r\n}) => {\r\n\r\n    return (\r\n        <div id={id} className={`tr__field ${className} ${disabled ? 'disabled' : ''}`}>\r\n            {label && (\r\n                <label htmlFor={name}>{label}</label>\r\n            )}\r\n            <div className=\"tr__field--wrapper\">\r\n                {viewOnly ? (\r\n                    <p className=\"label\">{defaultValue || value}</p>\r\n                ) : (\r\n                    <input\r\n                        key={defaultValue}\r\n                        type={type}\r\n                        name={name}\r\n                        id={name}\r\n                        className={`tr__field-input ${error ? 'error' : ''}`}\r\n                        placeholder={disabled ? '' : placeholder}\r\n                        autoComplete={autoComplete}\r\n                        ref={refs}\r\n                        onChange={onChange}\r\n                        value={value}\r\n                        defaultValue={defaultValue}\r\n                        maxLength={maxLength}\r\n                        {...rest}\r\n                    />\r\n                )}\r\n            </div>\r\n\r\n            <p\r\n                className={`error ${error && errorMessage && 'active'}`}\r\n            >{errorMessage}</p>\r\n        </div>\r\n    )\r\n};\r\n","import { AuthContext, HomeContext, MessengerContext } from 'contexts';\r\nimport React, { useContext, useEffect, useLayoutEffect, useRef, useState } from 'react';\r\nimport { MessageItem } from 'components';\r\nimport './index.scss';\r\nimport { Input } from 'components/common';\r\n\r\nexport const MessageBox = () => {\r\n    const [val, setVal] = useState('');\r\n    const messRef = useRef();\r\n    const { conversation, inboxeDetail, setInboxDetail } = useContext(MessengerContext);\r\n    const { userInfo } = useContext(AuthContext);\r\n    const { socket } = useContext(HomeContext);\r\n\r\n\r\n    /*eslint-disable */\r\n    useEffect(() => {\r\n        socket.on('sendMessage', (response) => {\r\n            const currentId = userInfo._id;\r\n            const { creator, recipient } = response.data;\r\n            const conversationId = conversation && conversation._id; \r\n            if (\r\n                (currentId === creator && conversationId === recipient) ||\r\n                (currentId === recipient && conversationId === creator)\r\n            ) {\r\n                setInboxDetail(old => [...old, response.data]);\r\n            }\r\n        });\r\n        return () => {\r\n            socket.off('sendMessage');\r\n        }\r\n    }, [conversation]);\r\n    /*eslint-enable */\r\n\r\n    useLayoutEffect(() => {\r\n        if (messRef.current.scrollHeight > messRef.current.offsetHeight)\r\n            messRef.current.scrollTop = messRef.current.scrollHeight;\r\n    }, [inboxeDetail])\r\n\r\n    const sendnewMessage = () => {\r\n        if (val) {\r\n            const payload = {\r\n                recipient: conversation._id,\r\n                text: val,\r\n            }\r\n            socket.emit('sendMessage', payload);\r\n            setVal('');\r\n        }\r\n    }\r\n\r\n    const hanldeChangeInput = e => {\r\n        const mess = e.target.value;\r\n        setVal(mess);\r\n    }\r\n\r\n    return (\r\n        <div className={`tr_messbox`}>\r\n\r\n            <div className=\"header\">{conversation && conversation.fullName}</div>\r\n            <div className=\"content\" ref={messRef}>\r\n                {\r\n                    inboxeDetail.length > 0 && inboxeDetail.map((data, index) =>\r\n                        <MessageItem\r\n                            mess={data.text}\r\n                            isAvatar={userInfo._id === data.recipient}\r\n                            key={index}\r\n                        // date={moment(data.created_date).format(DISPLAY_DATE)}\r\n                        />\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"footer flex\">\r\n                <Input\r\n                    className=\"input-search\"\r\n                    placeholder=\"Aa\"\r\n                    onChange={hanldeChangeInput}\r\n                    value={val}\r\n                    onKeyPress={e => {\r\n                        if (e.which === 13) sendnewMessage();\r\n                    }}\r\n                />\r\n                <button onClick={sendnewMessage}>send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","export default __webpack_public_path__ + \"static/media/default-avatar.522560c8.png\";","import React from 'react';\r\nimport './index.scss';\r\nimport avatar from 'assets/images/default-avatar.png';\r\n\r\nexport const MessageItem = ({\r\n    mess = '',\r\n    isAvatar = false,\r\n    date,\r\n    className = ''\r\n}) => {\r\n    return (\r\n        <div className={`item flex ${className} ${isAvatar ? 'left' : 'right'} mtx1 `}>\r\n            {isAvatar &&  <img src={avatar} alt=\"avatar\" className=\"avatar-mess mrx1\"></img>}\r\n            <div className={`tr_mess `}>{mess}</div>\r\n            <div className=\"time\">{date}</div>\r\n        </div>\r\n    )\r\n}\r\n","import { MessengerContext } from 'contexts';\r\nimport React, { useContext } from 'react';\r\nimport { MessageUserItem } from 'components';\r\nimport './index.scss';\r\nimport { Input } from 'components';\r\n\r\nexport const MessageNav = ({ allMessages = [] }) => {\r\n    const { conversation, setConversation } = useContext(MessengerContext);\r\n\r\n    const handleSelectUser = (user) => {\r\n        setConversation(user);\r\n    }\r\n\r\n    return (\r\n        <div className=\"tr_mess-nav\">\r\n            <div className=\"tr_mess-nav__header mbx2\">\r\n                <h1>Chat</h1>\r\n                <div className=\"tr__field mtx1\">\r\n                    <div className=\"tr__field--wrapper\">\r\n                        <Input className=\"input-search\" placeholder=\"Search in Messenger\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"tr_mess-nav__content\">\r\n                {allMessages.length > 0 && allMessages.map(item => {\r\n                    return (\r\n                        <MessageUserItem\r\n                            className={`${item && item.conversation && conversation && conversation._id === item.conversation._id ? \"selected\" : ''}`}\r\n                            userInfo={item && item.conversation}\r\n                            message={item && item.latestMessage}\r\n                            handleSelect={handleSelectUser}\r\n                            key={item && item.conversation._id}\r\n                        />\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport './index.scss';\r\nimport avatar from 'assets/images/default-avatar.png';\r\n\r\nexport const MessageUserItem = ({\r\n    className = \"\",\r\n    userInfo = {},\r\n    message = \"\",\r\n    handleSelect = () => {}\r\n}) => {\r\n    return (\r\n        <div className={`tr_user-item flex ${className}`} onClick={() => handleSelect(userInfo)}>\r\n            <img src={avatar} alt=\"avatar\" className=\"avatar mrx1\"></img>\r\n            <div className=\"tr_user-item__info\">\r\n                <div className=\"tr_user-item__info-name\">{userInfo && userInfo.fullName}</div>\r\n                <div className=\"tr_user-item__info-mess\">{message}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { AuthContext, HomeContext, MessengerContext } from 'contexts';\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { MessageBox, MessageNav } from 'components/';\r\nimport './index.scss';\r\n\r\nexport const AllMessage = () => {\r\n    const {\r\n        allMessages,\r\n        doGetListInbox,\r\n        conversation,\r\n        doGetInboxDetail,\r\n        setConversation\r\n    } = useContext(MessengerContext);\r\n    const { socket } = useContext(HomeContext);\r\n    const { userInfo } = useContext(AuthContext);\r\n\r\n    /*eslint-disable */\r\n    useEffect(() => {\r\n        socket.on('newMessage', (response) => {\r\n            const currentId = userInfo._id;\r\n            const { recipient, creator } = response.data;\r\n            console.log(response)\r\n            if (currentId === recipient || currentId === creator) {\r\n                doGetListInbox();\r\n            }\r\n        });\r\n        doGetListInbox(data => {\r\n            setConversation(data[0].conversation);\r\n        });\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (conversation)\r\n            doGetInboxDetail(conversation._id);\r\n    }, [conversation])\r\n    /*eslint-enable */\r\n\r\n    return (\r\n        <div className=\"tr_mess-content flex \">\r\n            <MessageNav allMessages={allMessages} />\r\n            <MessageBox />\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useContext } from \"react\";\r\nimport { Input } from \"components\";\r\nimport { useHistory } from \"react-router\";\r\nimport './index.scss';\r\nimport { AuthContext } from \"contexts\";\r\n\r\nconst LoginFrom = () => {\r\n    const [email, setEmail] = useState(\"\");\r\n    const [fullName, setFullName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const history = useHistory();\r\n    const { doLogin, doRegister } = useContext(AuthContext);\r\n\r\n    const login = () => {\r\n        doLogin({ email, password }, () => {\r\n            history.push('/');\r\n        });\r\n    }\r\n\r\n    const register = () => {\r\n        doRegister({fullName, email, password});\r\n    }\r\n\r\n    return (\r\n        <div className=\"tr_login-page\">\r\n            <div className=\"tr_login-page__form\">\r\n                <Input\r\n                    className=\"mbx3\"\r\n                    label=\"Name\"\r\n                    placeholder=\"Enter name\"\r\n                    value={fullName}\r\n                    onChange={e => setFullName(e.target.value)}\r\n                />\r\n                <Input\r\n                    className=\"mbx3\"\r\n                    label=\"Email\"\r\n                    placeholder=\"Enter email\"\r\n                    value={email}\r\n                    onChange={e => setEmail(e.target.value)}\r\n                />\r\n                <Input\r\n                    className=\"mbx3\"\r\n                    label=\"Password\"\r\n                    placeholder=\"Enter password\"\r\n                    value={password}\r\n                    onChange={e => setPassword(e.target.value)}\r\n                />\r\n                <button\r\n                    className=\"mrx2\"\r\n                    onClick={login}\r\n                >\r\n                    login\r\n                </button>\r\n                <button\r\n                    onClick={register}\r\n                >\r\n                    register\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginFrom;"],"sourceRoot":""}